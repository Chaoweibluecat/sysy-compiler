use crate::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+([^/*][^*]*\*+)*/" =>{},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <items: (GlobalItem)*> => CompUnit { <> };

GlobalItem: GlobalItem = {
    FuncDef => GlobalItem::FuncDef(<>),
    Decl => GlobalItem::Decl(<>),
}


FuncDef: FuncDef = {
  <head: FuncHead> <params: (FuncFParams)?> ")" <block: Block> => {
    let func_params = match params {
        None => vec![],
        Some(p) => p,
    };
    FuncDef { func_type:head.0, ident:head.1, params: func_params, block}
  }
}

FuncHead: (FuncType, String) = {
   "int" <ident: Ident> "(" => (FuncType::Int, ident),
   "void" <ident: Ident> "(" => (FuncType::Void, ident),
}

FuncFParams: Vec<FuncFParam> = {
    <p1: FuncFParam> <mut p_list: ("," <FuncFParam>)*> => {
        p_list.insert(0, p1);
        p_list
    }
}

FuncFParam: FuncFParam = {
    <b_type: BType> <name: Ident>  => FuncFParam{<>}
}

FuncType: FuncType = {
    "int" => FuncType::Int,
    "void" => FuncType::Void,
}

Block: Block = "{" <items: (BlockItem)*> "}" => Block { <> };

BlockItem: BlockItem = {
  Decl  => BlockItem::Decl(<>),
  Stmt  => BlockItem::Stmt(<>),
}
Stmt: Stmt = {
    OpenStmt => <>,
    ClosedStmt => <>,
}

ClosedStmt: Stmt = {
  <lval: LVal>  "=" <exp: Exp> ";" => Stmt::Assign(<>),
  <exp: (<Exp>)?> ";" => Stmt::Exp(<>), 
  Block => Stmt::Block(Box::new(<>)), 
    "if" "(" <cond: Exp> ")" <then: ClosedStmt> "else" <else_stmt: ClosedStmt> =>
        Stmt::IfStmt(IfStmt{cond, then:Box::new(then), else_stmt:Some(Box::new(else_stmt))}),
  "return" <exp: Exp> ";" => Stmt::Ret(<>),
  "while" "(" <cond: Exp> ")" <body: ClosedStmt> => Stmt::While(While {cond, body: Box::new(body)}),
  "break" ";" => Stmt::Break(Break{}),
  "continue" ";" => Stmt::Continue(Continue{}),
}

OpenStmt: Stmt = {
    "if" "(" <cond: Exp> ")" <then: Stmt> => Stmt::IfStmt(IfStmt{cond, then: Box::new(then), else_stmt: None}),
    "if" "(" <cond: Exp> ")" <then: ClosedStmt> "else" <else_stmt: OpenStmt> =>
        Stmt::IfStmt(IfStmt{cond, then:Box::new(then), else_stmt:Some(Box::new(else_stmt))}),
    "while" "(" <cond: Exp> ")" <body: OpenStmt> => Stmt::While(While {cond, body: Box::new(body)}),
}



Decl: Decl = {
  ConstDecl => Decl::ConstDecl(<>),
  VarDecl => Decl::VarDecl(<>),
}

VarDecl: VarDecl = {
  "int" <def_1: VarDef> <mut def_list: ("," <VarDef>)*> ";" => {
    def_list.insert(0, def_1);
    VarDecl{b_type:BType::Int, def_list}
  }
}

VarDef: VarDef = {
  <id: Ident> <length: ("[" <ConstExp> "]")*> => VarDef::IdOnly(<>),
  <id: Ident> <length: ("[" <ConstExp> "]")*> "=" <init: InitVal> => VarDef::Assign(<>),
}

InitVal: InitVal = {
    <exp: Exp> => InitVal::Single(exp),
    "{" <agg: (InitValAgg)?> "}" => InitVal::List(agg.unwrap_or_else(|| {vec![]})),
}

InitValAgg: Vec<InitVal> = {
    <val1: InitVal> <mut val_list: ("," <InitVal>)*> => {
        val_list.insert(0, val1);
        val_list
    }
}


ConstDecl: ConstDecl = {
  "const" "int" <def_1: ConstDef> <mut def_list: ("," <ConstDef>)*> ";"  => {
    def_list.insert(0, def_1);
    ConstDecl {b_type:BType::Int, def_list: def_list}
  }
}

BType: BType = {
    "int" => BType::Int
}

ConstDef: ConstDef = {
  <id: Ident> "=" <dims: ("[" <ConstExp> "]")*> <init_val: ConstInitVal> => {
    ConstDef {<>}
  }
}

ConstInitVal: ConstInitVal = {
  <exp: ConstExp> => ConstInitVal::Single(<>),
  "{" <agg: (ConstExpAgg)?> "}" => ConstInitVal::List(agg.unwrap_or_else(|| {vec![]})),
}

ConstExpAgg: Vec<ConstExp> = {
    <exp1: ConstExp> <mut exp_list: ("," <ConstExp>)*> => {
        exp_list.insert(0, exp1);
        exp_list
    }
}

ConstExp: ConstExp = {
  <exp: Exp> => ConstExp {<>}
}


Exp: Exp = {
    LOrExp => Exp::LOrExp(<>),
};

FuncCall: FuncCall = {
    <func: Ident> "(" <params_op: (FuncRParams)?> ")" => {
        let params = match params_op {
            None => vec![],
            Some(p) => p,
        };
        FuncCall{func_name:func, params}
    }
}

FuncRParams : Vec<Exp> = {
    <first: Exp> <mut exps: ("," <Exp>)*> => {
        exps.insert(0, first);
        exps
    }
}
UnaryExp: UnaryExp = {
    PrimaryExp => UnaryExp::PrimaryExp(<>),
    FuncCall => UnaryExp::FuncCall(<>),
    <op:UnaryOp> <exp:UnaryExp> => UnaryExp::UnaryExp(op, Box::new(exp)),
}
 
UnaryOp: UnaryOp = {
    "+" => UnaryOp::POSITIVE,
    "-" => UnaryOp::NEGATIVE,
    "!" => UnaryOp::NOT,
}

MulExp: MulExp = {
  UnaryExp => MulExp::UnaryExp(<>),
  <left:MulExp> <op:MulOp> <right:UnaryExp> => MulExp::MulExp(Box::new(left), op, right),
}

MulOp: MulOp = {
    "*" => MulOp::Multi,
    "/" => MulOp::Divide,
    "%" => MulOp::Mod,
}

AddExp: AddExp = {
  MulExp => AddExp::MulExp(<>),
  <left:AddExp> <op:AddOp> <right:MulExp> => AddExp::AddExp(Box::new(left), op, right),
}

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Minus,
}

RelExp: RelExp = {
  AddExp => RelExp::AddExp(<>),
  <left:RelExp> <op:RelOp> <right:AddExp> => RelExp::RelExp(Box::new(left), op, right),
}

RelOp: RelOp = {
  ">=" => RelOp::Ge,
  "<=" => RelOp::Le,
  ">" => RelOp::Gt,
  "<" => RelOp::Lt,
}

EqExp: EqExp = {
  RelExp => EqExp::RelExp(<>),
  <left:EqExp> <op:EqOp> <right:RelExp> => EqExp::EqExp(Box::new(left), op, right),
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
}


LAndExp: LAndExp = {
  EqExp => LAndExp::EqExp(<>),
  <left:LAndExp> <op:LAndOp> <right:EqExp> => LAndExp::LAndExp(Box::new(left), op, right),
}

LOrExp: LOrExp = {
  LAndExp => LOrExp::LAndExp(<>),
  <left:LOrExp> <op:LOrOp> <right:LAndExp> => LOrExp::LOrExp(Box::new(left), op, right),
}


LAndOp: LAndOp = "&&" => LAndOp::And;
LOrOp: LOrOp = "||" => LOrOp::Or;


PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
    LVal => PrimaryExp::LVal(<>),
    Number => PrimaryExp::Number(<>),
}

Number: i32 = <num: IntConst> => <>;
LVal: LVal = {
    <id: Ident> <len: ("[" <Exp> "]")*> => {
        let length_box = len.into_iter().map(|x| {Box::new(x)}).collect();
        LVal{id, indices:length_box}
    }
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
